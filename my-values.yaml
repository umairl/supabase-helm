# ======================
# SECRET CONFIGURATIONS
# ======================
secret:
  jwt:
    anonKey: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiYW5vbiIsImlzcyI6InN1cGFiYXNlLWRlbW8iLCJpYXQiOjE2NDE3NjkyMDAsImV4cCI6MTc5OTUzNTYwMH0.ote7sQwvBw-5QF3zMj0CMfRv1Pa7w7k6M3xH54yOccQ
    serviceKey: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoic2VydmljZV9yb2xlIiwiaXNzIjoic3VwYWJhc2UtZGVtbyIsImlhdCI6MTY0MTc2OTIwMCwiZXhwIjoxNzk5NTM1NjAwfQ.iQs2NFOP49x3qKmlpf7-lEY4ob8hxSwotu2bmRYLGOY
    secret: kX7mP9qW3tL2rZ6vY1jF5hN8bR4tK9zQ
  smtp:
    username: your-mail@example.com  # <<< MUST REPLACE WITH REAL SMTP
    password: example123456         # <<< MUST REPLACE WITH REAL SMTP
  dashboard:
    username: newuser
    password: tool4098
  db:
    username: postgres
    password: db54321base
    database: postgres
    password_encoded: db54321base
  analytics:
    apiKey: mY9qW3kP7tL2rZ6vX1jF5hN8bR4tQ9zK

# ======================
# DATABASE (PostgreSQL)
# ======================
db:
  enabled: true
  image:
    tag: 15.1.0.147
  postgresql:
    initdbScripts:
      create-schemas.sql: |
        CREATE SCHEMA IF NOT EXISTS auth;
        CREATE SCHEMA IF NOT EXISTS storage;
        CREATE SCHEMA IF NOT EXISTS _analytics;
        CREATE SCHEMA IF NOT EXISTS _realtime;
        CREATE SCHEMA IF NOT EXISTS graphql_public;
        CREATE SCHEMA IF NOT EXISTS extensions;
      create-roles.sql: |
        CREATE ROLE authenticator NOINHERIT LOGIN PASSWORD 'db54321base';
        CREATE ROLE anon;
        CREATE ROLE service_role;
        GRANT anon TO authenticator;
        GRANT service_role TO authenticator;
        GRANT ALL PRIVILEGES ON SCHEMA auth TO authenticator;
        GRANT ALL PRIVILEGES ON SCHEMA storage TO authenticator;
        GRANT ALL PRIVILEGES ON SCHEMA _analytics TO authenticator;
        GRANT ALL PRIVILEGES ON SCHEMA _realtime TO authenticator;
        GRANT ALL PRIVILEGES ON SCHEMA graphql_public TO authenticator;
        GRANT ALL PRIVILEGES ON SCHEMA public TO authenticator;
        GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO authenticator;
        GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO authenticator;
  livenessProbe:
    exec:
      command:
        - pg_isready
        - -U
        - postgres
    initialDelaySeconds: 30
  persistence:
    enabled: true
    size: 10Gi
  service:
    ports:
      postgresql: 5432
  containerPorts:
    postgresql: 5432
  primary:
    service:
      ports:
        postgresql: 5432
    containerPorts:
      postgresql: 5432

# ======================
# STUDIO CONFIGURATION
# ======================
studio:
  image:
    tag: 20240326-5e5586d
  environment:
    STUDIO_DEFAULT_ORGANIZATION: "My Organization"
    STUDIO_DEFAULT_PROJECT: "My Project"
    SUPABASE_PUBLIC_URL: https://supabasetool.edgeinfra.site/
    NEXT_PUBLIC_ENABLE_LOGS: "true"
  livenessProbe:
    httpGet:
      path: /api/profile
      port: 3000
    initialDelaySeconds: 30

# ======================
# AUTH CONFIGURATION (CRITICAL FIXES)
# ======================
auth:
  image:
    tag: v2.143.0
  environment:
    API_EXTERNAL_URL: https://supabasetool.edgeinfra.site
    GOTRUE_SITE_URL: https://supabasetool.edgeinfra.site
    GOTRUE_EXTERNAL_EMAIL_ENABLED: "true"
    GOTRUE_MAILER_AUTOCONFIRM: "true"
    GOTRUE_SMTP_ADMIN_EMAIL: "your-mail@example.com"  # <<< MUST UPDATE
    GOTRUE_SMTP_HOST: "smtp.example.com"            # <<< MUST UPDATE
    GOTRUE_SMTP_PORT: "587"
    GOTRUE_SMTP_SENDER_NAME: "your-mail@example.com"
    DB_USER: postgres
    GOTRUE_DB_SCHEMA: "auth"
    # CRITICAL FIX: Added search_path and sslmode
    GOTRUE_DB_DATABASE_URL: "postgres://postgres:$(DB_PASSWORD_ENC)@supabase-supabase-db:5432/postgres?search_path=auth&sslmode=disable"
    # CRITICAL FIX: Explicit SMTP credentials from secret
    GOTRUE_SMTP_USER: $(GOTRUE_SMTP_USER)
    GOTRUE_SMTP_PASS: $(GOTRUE_SMTP_PASS)

# ======================
# REST API CONFIGURATION
# ======================
rest:
  image:
    tag: v12.0.1
  environment:
    PGRST_DB_USER: authenticator
    PGRST_DB_ANON_ROLE: anon
    PGRST_DB_SCHEMAS: "public,storage,graphql_public"
    PGRST_JWT_SECRET: $(PGRST_JWT_SECRET)
    DB_PASSWORD: db54321base
    DB_PASSWORD_ENC: db54321base
    PGRST_DB_URI: "postgres://authenticator:$(DB_PASSWORD)@supabase-supabase-db:5432/postgres"

# ======================
# REALTIME CONFIGURATION
# ======================
realtime:
  image:
    tag: v2.27.5
  livenessProbe:
    httpGet:
      path: /
      port: 4000
    initialDelaySeconds: 30
  environment:
    DB_USER: postgres
    DB_AFTER_CONNECT_QUERY: "SET search_path TO _realtime"
    DB_NAME: postgres
    DB_HOST: supabase-supabase-db
    DB_PORT: 5432
    DB_PASSWORD: $(DB_PASSWORD)
    DB_SSL: disable
    SECRET_KEY_BASE: UpNVntn3cDxHJpq99YMc1T1AQgQpc8kfYTuRgBiYa15BLrx8etQoXz3gZv1/u2oq

# ======================
# META CONFIGURATION
# ======================
meta:
  image:
    tag: v0.80.0
  environment:
    DB_USER: postgres
    DB_HOST: supabase-supabase-db
    DB_PORT: 5432
    DB_PASSWORD: $(DB_PASSWORD)

# ======================
# STORAGE CONFIGURATION
# ======================
storage:
  image:
    tag: v0.46.4
  livenessProbe:
    httpGet:
      path: /status
      port: 5000
    initialDelaySeconds: 30
  persistence:
    enabled: false
  environment:
    DB_USER: postgres
    DB_HOST: supabase-supabase-db
    DB_PORT: 5432
    DB_PASSWORD: $(DB_PASSWORD)
    DB_SCHEMA: storage

# ======================
# IMGPROXY CONFIGURATION
# ======================
imgproxy:
  image:
    tag: v3.8.0
  environment:
    IMGPROXY_ENABLE_WEBP_DETECTION: "true"
  livenessProbe:
    exec:
      command:
        - imgproxy
        - health
    initialDelaySeconds: 30
  persistence:
    enabled: false

# ======================
# KONG CONFIGURATION
# ======================
kong:
  image:
    repository: kong
    tag: 2.8.1
  environment:
    KONG_DECLARATIVE_CONFIG: /usr/local/kong/kong.yml
    KONG_LOG_LEVEL: info
  ingress:
    enabled: true
    className: "nginx"
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: /
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
    tls:
      - secretName: supabase-tls
        hosts:
          - supabasetool.edgeinfra.site
    clusterIssuer: "letsencrypt-prod"
    hosts:
      - host: supabasetool.edgeinfra.site
        paths:
          - path: /
            pathType: Prefix

# ======================
# ANALYTICS CONFIGURATION (CRITICAL FIXES)
# ======================
analytics:
  image:
    tag: 1.4.0
  livenessProbe:
    httpGet:
      path: /health
      port: 4000
    initialDelaySeconds: 60  # Increased for initialization
  environment:
    DB_USERNAME: postgres
    DB_HOSTNAME: supabase-supabase-db
    DB_PORT: 5432
    DB_PASSWORD: $(DB_PASSWORD)
    DB_SCHEMA: _analytics
    DB_DATABASE: postgres
    LOGFLARE_SUPABASE_MODE: "true"
    LOGFLARE_SINGLE_TENANT: "true"
    FEATURE_FLAG_OVERRIDE: "multibackend=true"
    # CRITICAL FIX: Force single node operation
    LOGFLARE_CLUSTER_SIZE: "1"
    LOGFLARE_NODE_HOST: "127.0.0.1"
    # CRITICAL FIX: Explicit connection URL
    POSTGRES_BACKEND_URL: "postgresql://postgres:$(DB_PASSWORD)@supabase-supabase-db:5432/postgres?search_path=_analytics"

# ======================
# VECTOR CONFIGURATION
# ======================
vector:
  image:
    tag: 0.34.0-alpine
  livenessProbe:
    httpGet:
      path: /health
      port: 9001
    initialDelaySeconds: 30
  volumeMounts:
    - name: pod-logs
      mountPath: /var/log/pods
  volumes:
    - name: pod-logs
      hostPath:
        path: /var/log/pods

# ======================
# FUNCTIONS CONFIGURATION
# ======================
functions:
  image:
    tag: v1.41.2
  environment:
    DB_USER: postgres
    DB_HOST: supabase-supabase-db
    DB_PORT: 5432
    DB_PASSWORD: $(DB_PASSWORD)
